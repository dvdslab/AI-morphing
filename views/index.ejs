<!DOCTYPE html>

<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dall-E morphing Webapp</title>
    <style>
        * {
            /* border: 1px solid coral; */
            font-family: 'Courier New', Courier, monospace;
            font-size: 18px;
        }

        .target-text {
            font-weight: 900;
        }

        fieldset {
            margin-bottom: 8px;
        }
    </style>
</head>

<body>
    <p>A custom OpenAI webapp for Dall-E</p>

    <fieldset>
        <legend>Setup</legend>
        <div>
            Please enter your <a
                href="https://www.youtube.com/watch?v=DFmmiYlbgX0&list=PLx3k0RGeXZ_zs3az0Z2BnpTIPH2lxQfFX&index=4"
                target="_blank">OpenAI API Key</a>: <input id="api-key"
                value="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">
        </div>
    </fieldset>

    <fieldset>
        <legend>Request parameters</legend>
        <div>
            <textarea id="text-prompt" rows="4" cols="52">nice painting of a face in the 1300s, tilt shift, bokeh, voxel, vray render, high
                detail</textarea>
        </div>

        <div>
            Image count (1-4): <input id="image-count" value="2">
        </div>

        <div>
            Image size:
        </div>

        <div>
            <input type="radio" id="radio-256" name="image-size" value="256" checked>
            <label for="256">256</label>
        </div>

        <div>
            <button id="button-request">Request</button>
        </div>
    </fieldset>

    <fieldset>
        <legend>Request Status</legend>
        <div>
            <p id="request-status">No request performed yet</p>
        </div>
    </fieldset>

    <fieldset>
        <legend>Images</legend>

        <!-- Response images will be added here -->
        <div id="image-container"></div>

    </fieldset>
    <fieldset>
        <button id="btn" type="submit">Morph</button>
    </fieldset>

    <script>
        // We can define here the behavior for the elements on the website...

        // URL for POST requests
        const dalleEndpoint = 'https://api.openai.com/v1/images/generations';

        // Fetch DOM elements
        const reqButton = document.getElementById('button-request');
        const reqStatus = document.getElementById('request-status');

        // Attach click behavior to the button
        reqButton.onclick = function () {

            reqButton.disabled = true;

            // Give some feedback to user
            reqStatus.innerHTML = "Request started...";

            // Fetch image request data
            var key = document.getElementById('api-key').value;
            const prompt = document.getElementById('text-prompt').value;
            const count = Number(document.getElementById('image-count').value);
            const radios = document.getElementsByName('image-size');
            let size;
            for (let i = 0; i < radios.length; i++) {
                if (radios[i].checked) {
                    size = Number(radios[i].value);
                    break;
                }
            }

            // Form the request body according to the API:
            // https://beta.openai.com/docs/api-reference/images/create
            const reqBody = {
                prompt: prompt,
                n: count,
                size: size + "x" + size,
                response_format: 'url',
            };

            // Form the data for a POST request:
            const reqParams = {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${key}`,
                },
                body: JSON.stringify(reqBody)
            }

            // Use the Fetch API to do an async POST request to OpenAI:
            // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API
            fetch(dalleEndpoint, reqParams)
                .then(res => res.json())
                .then(json => {
                    addGif()
                    addImages(json, prompt);
                })
                .catch(error => {
                    reqStatus.innerHTML = error;
                    reqButton.disabled = false;
                });
        }



        /**
         * Adds images on the page 
         * @param {Obj} jsonData The Dall-E API response
         * @param {String} prompt The original prompt that generated the images
         */

        var links = []

        function addImages(jsonData, prompt) {

            // console.log(jsonData);
            reqButton.disabled = false;

            // Handle a possible error response from the API
            if (jsonData.error) {
                reqStatus.innerHTML = 'ERROR: ' + jsonData.error.message;
                return;
            }

            // Parse the response object, deserialize the image data, 
            // and attach new images to the page.
            const container = document.getElementById('image-container');
            for (let i = 0; i < jsonData.data.length; i++) {
                let imgData = jsonData.data[i];
                let img = document.createElement('img');
                img.src = imgData.url;
                img.alt = prompt;
                links = links.concat(imgData.url)
                // let tes = document.createElement('p')
                // tes.innerHTML = imgData.url
                container.prepend(img);
            }

            reqStatus.innerHTML = jsonData.data.length + ' images received for "' + prompt + '"';
        }

        function addGif() {
            console.log(links)
            return links
        }

        const btn = document.getElementById('btn');

        // Handle the form's submit event (when the button Submit gets clicked)
        btn.addEventListener("click", e => {
            // Prevent the default HTML form submission behavior:
            e.preventDefault();
            btn.innerHTML = "Morphing..."
            links = links.concat(document.getElementById('api-key').value)
            // Send the Array as a stringified JSON to the server via an Ajax request using the Fetch API:
            fetch("/", {
                    method: "POST",
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(links)
                })
                .then(res => res.json()) // <= Handle JSON response from server 
                .then(data => console.log(data))
                .catch(error => console.log(error));
        })
    </script>
</body>

</html>